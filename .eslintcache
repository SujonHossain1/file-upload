[{"D:\\web-development\\file-upload\\src\\index.js":"1","D:\\web-development\\file-upload\\src\\App.js":"2","D:\\web-development\\file-upload\\src\\reportWebVitals.js":"3","D:\\web-development\\file-upload\\src\\FileUpload.js":"4","D:\\web-development\\file-upload\\src\\Slugify.js":"5","D:\\web-development\\file-upload\\src\\Products.js":"6","D:\\web-development\\file-upload\\src\\ProductItem.js":"7","D:\\web-development\\file-upload\\src\\Loader.js":"8","D:\\web-development\\file-upload\\src\\Skelentor.js":"9"},{"size":500,"mtime":1612089207856,"results":"10","hashOfConfig":"11"},{"size":1009,"mtime":1612611653380,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1612089207856,"results":"13","hashOfConfig":"11"},{"size":11964,"mtime":1612606358206,"results":"14","hashOfConfig":"11"},{"size":293,"mtime":1612351099846,"results":"15","hashOfConfig":"11"},{"size":1787,"mtime":1612611720307,"results":"16","hashOfConfig":"11"},{"size":953,"mtime":1612607297599,"results":"17","hashOfConfig":"11"},{"size":1678,"mtime":1612626493109,"results":"18","hashOfConfig":"11"},{"size":1191,"mtime":1612626245037,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"v0mqyx",{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\web-development\\file-upload\\src\\index.js",[],["42","43"],"D:\\web-development\\file-upload\\src\\App.js",["44","45","46"],"import './App.css';\nimport FileUpload from './FileUpload';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory\n} from 'react-router-dom';\nimport Products from './Products';\nimport { useState } from 'react';\nimport Skeleton from './Skelentor';\n\nfunction App() {\n  const history = useHistory();\n  const [updateProduct, setUpdateProduct] = useState({});\n  const handleUpdateProduct = (product) => {\n    setUpdateProduct(product);\n  };\n\n\n  return (\n    <Router>\n      <h1> <Link to=\"/\"> Add Product </Link> </h1>\n      <h1> <Link to=\"/products\"> Products </Link> </h1>\n      <Switch>\n        <Route exact path='/'>\n          {/* <FileUpload\n            updateProduct={updateProduct}\n            handleUpdateProduct={handleUpdateProduct}\n          /> */}\n          <Skeleton />\n        </Route>\n        <Route path='/products'>\n          <Products\n            handleUpdateProduct={handleUpdateProduct}\n          />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","D:\\web-development\\file-upload\\src\\reportWebVitals.js",[],"D:\\web-development\\file-upload\\src\\FileUpload.js",["47","48"],"import React, { useEffect, useState } from 'react';\r\nimport slugify from './Slugify';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst FileUpload = ({ updateProduct, handleUpdateProduct }) => {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [categories, setCategories] = useState([]);\r\n    const [subCategories, setSubCategories] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [product, setProduct] = useState({\r\n        title: '',\r\n        url: '',\r\n        category: '',\r\n        subCategory: ''\r\n    });\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n    const [getProduct, setGetProduct] = useState({});\r\n    const [image1, setImage1] = useState(null);\r\n    const [image2, setImage2] = useState(null);\r\n    const [image3, setImage3] = useState(null);\r\n    const [image4, setImage4] = useState(null);\r\n\r\n    // useEffect(() => {\r\n    //     setProduct(updateProduct);\r\n    //     console.log(updateProduct);\r\n    // }, [handleUpdateProduct])\r\n\r\n    const inputHandler = (e) => {\r\n        const { name, value } = e.target;\r\n        setProduct((product) => ({\r\n            ...product,\r\n            url: slugify(product.title || ' '),\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n\r\n    const imageHandler1 = (e) => {\r\n        const file = e.target.files[0];\r\n        setImage1(file);\r\n    };\r\n    const imageHandler2 = (e) => {\r\n        const file = e.target.files[0];\r\n        setImage2(file);\r\n    }\r\n    const imageHandler3 = (e) => {\r\n        const file = e.target.files[0];\r\n        setImage3(file);\r\n    }\r\n    const imageHandler4 = (e) => {\r\n        const file = e.target.files[0];\r\n        setImage4(file);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:4000/api/categories')\r\n            .then(res => res.json())\r\n            .then(data => setCategories(data))\r\n            .catch(err => console.error(err));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (product.category) {\r\n            fetch(`http://localhost:4000/api/subCategories/${product.category}`)\r\n                .then(res => res.json())\r\n                .then(data => setSubCategories(data.subCategories))\r\n                .catch(err => console.error(err));\r\n        }\r\n    }, [product.category]);\r\n\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:4000/api/products')\r\n            .then(res => res.json())\r\n            .then(data => setProducts(data))\r\n            .catch(err => console.log(err));\r\n    }, [])\r\n\r\n\r\n\r\n    const onSubmit = (data, event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = new FormData();\r\n\r\n        if (image1) formData.append('image1', image1);\r\n        if (image2) formData.append('image2', image2);\r\n        if (image3) formData.append('image3', image3);\r\n        if (image2) formData.append('image4', image4)\r\n\r\n\r\n        for (const key of Object.keys(product)) {\r\n            formData.set(key, product[key]);\r\n            console.log(key, product[key]);\r\n        };\r\n\r\n        const { category, subCategory } = data;\r\n\r\n        if (category && subCategory) {\r\n            fetch(`http://localhost:4000/api/products/${product.category}/${product.subCategory}/add-product`, {\r\n                method: 'POST',\r\n                body: formData,\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    setGetProduct(data);\r\n\r\n                })\r\n                .catch(err => setErrorMsg(err.message));\r\n        }\r\n    }\r\n\r\n    console.log(errorMsg);\r\n    console.log(getProduct);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                {\r\n                    getProduct.data ?\r\n                        getProduct.message &&\r\n                        <div class=\"alert alert-success\" role=\"alert\">\r\n                            <h2> {getProduct.message} </h2>\r\n                        </div>\r\n                        :\r\n                        getProduct.message &&\r\n                        <div class=\"alert alert-warning\" role=\"alert\">\r\n                            <h2> {getProduct.message} </h2>\r\n                        </div>\r\n                }\r\n            </div>\r\n            <form className=\"col-md-6 mx-auto p-4 shadow-sm bg-light\" onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"slug\" className=\"form-label\">Product Category *</label>\r\n                    <select\r\n                        className=\"form-select\"\r\n                        name=\"category\"\r\n                        onChange={inputHandler}\r\n                        ref={register({\r\n                            required: 'Product Category is required'\r\n                        })}\r\n                    >\r\n                        <option value=\"\">Choose Category</option>\r\n                        {categories.map(category => (\r\n                            <option\r\n                                value={category._id}\r\n                                key={category._id}\r\n                            >\r\n                                {category.category}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    {errors.category && <span style={{ color: 'red' }}>{errors.category.message}</span>}\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"slug\" className=\"form-label\">Product Sub Category *</label>\r\n                    <select\r\n                        className=\"form-select\"\r\n                        name=\"subCategory\"\r\n                        onChange={inputHandler}\r\n                        ref={register({\r\n                            required: 'Product Sub Category is required'\r\n                        })}\r\n                    >\r\n                        <option value=\"\">Choose Sub Category</option>\r\n                        {subCategories?.map(subCat => (\r\n                            <option\r\n                                value={subCat._id}\r\n                                key={subCat._id}\r\n                            >\r\n                                {subCat.subCategory}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    {errors.subCategory && <span style={{ color: 'red' }}>{errors.subCategory.message}</span>}\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"\" className=\"form-label\">Title *</label>\r\n                    <input\r\n                        name=\"title\"\r\n                        onChange={inputHandler}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        ref={register({\r\n                            required: 'Product Title is required'\r\n                        })}\r\n                    />\r\n                    {errors.title && <span style={{ color: 'red' }}>{errors.title.message}</span>}\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"shotDescription\" className=\"form-label\">Shot Description</label>\r\n                    <textarea\r\n                        onChange={inputHandler}\r\n                        name=\"shortDescription\"\r\n                        className=\"form-control\"\r\n                        id=\"shotDescription\"\r\n                        rows=\"3\">\r\n                    </textarea>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"description\" className=\"form-label\">*Description</label>\r\n                    <textarea\r\n                        onChange={inputHandler}\r\n                        name=\"description\"\r\n                        className=\"form-control\"\r\n                        id=\"description\"\r\n                        ref={register({\r\n                            required: 'Product Description is required'\r\n                        })}\r\n                        rows=\"5\">\r\n                    </textarea>\r\n                    {errors.description && <span style={{ color: 'red' }}>{errors.description.message}</span>}\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"stock\" className=\"form-label\">*Stock</label>\r\n                    <input name=\"stock\" onChange={inputHandler} type=\"number\" id=\"stock\" className=\"form-control\" value={product.stock}\r\n                        ref={register({\r\n                            required: \"Product Stock is required\",\r\n                        })}\r\n                    />\r\n                    {errors.stock && <span style={{ color: 'red' }}>{errors.stock.message}</span>}\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"previousPrice\" className=\"form-label\">Previous Price</label>\r\n                    <input name=\"previousPrice\" onChange={inputHandler} type=\"number\" className=\"form-control\" id=\"previousPrice\" />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"price\" className=\"form-label\">* Price</label>\r\n                    <input name=\"price\" onChange={inputHandler} type=\"number\" className=\"form-control\" id=\"price\" value={product.price}\r\n                        ref={register({\r\n                            required: \"Product Price is required\",\r\n                        })}\r\n                    />\r\n                    {errors.price && <span style={{ color: 'red' }}>{errors.price.message}</span>}\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"formFile\" className=\"form-label\">Image 1 </label>\r\n                    <input onChange={imageHandler1} accept=\".png, .jpeg, .jpg\" name=\"image1\" className=\"form-control\" type=\"file\" filename=\"about.jpg\" />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"formFile\" className=\"form-label\">Image 2 </label>\r\n                    <input onChange={imageHandler2} accept=\".png, .jpeg, .jpg\" name=\"image2\" className=\"form-control\" type=\"file\" />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"formFile\" className=\"form-label\">Image 3 </label>\r\n                    <input onChange={imageHandler3} accept=\".png, .jpeg, .jpg\" name=\"image2\" className=\"form-control\" type=\"file\" />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"formFile\" className=\"form-label\">Image 4 </label>\r\n                    <input onChange={imageHandler4} accept=\".png, .jpeg, .jpg\" name=\"image2\" className=\"form-control\" type=\"file\" />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"productKey\" className=\"form-label\">Product Key</label>\r\n                    <input name=\"productKey\" onChange={inputHandler} type=\"text\" id=\"productKey\" className=\"form-control\"\r\n                        ref={register({\r\n                            required: 'Product key is required'\r\n                        })}\r\n                    />\r\n                    {errors.productKey && <span style={{ color: 'red' }}>{errors.productKey.message}</span>}\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"alt\" className=\"form-label\">Alt</label>\r\n                    <input name=\"alt\" onChange={inputHandler} type=\"text\" id=\"alt\" className=\"form-control\" />\r\n                </div>\r\n\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"url\" className=\"form-label\">*Url</label>\r\n                    <input name=\"url\" defaultValue={slugify(product.title)} onChange={inputHandler} type=\"text\" id=\"url\" className=\"form-control\" />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FileUpload;","D:\\web-development\\file-upload\\src\\Slugify.js",[],"D:\\web-development\\file-upload\\src\\Products.js",["49"],"import React, { useEffect, useState } from 'react';\r\nimport Loader from './Loader';\r\nimport ProductItem from './ProductItem';\r\n\r\n\r\nconst Products = ({ handleUpdateProduct }) => {\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        const getDataFormDB = async () => {\r\n\r\n            const res = await fetch('http://localhost:4000/api/products');\r\n            const data = await res.json();\r\n\r\n            setProducts(data);\r\n            setLoading(false)\r\n        }\r\n        getDataFormDB();\r\n    }, []);\r\n\r\n    const handleDeleteProduct = productId => {\r\n\r\n        const isDelete = window.confirm(\"Are You Sure!\");\r\n\r\n        if (isDelete) {\r\n            fetch('http://localhost:4000/api/products/' + productId, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => console.log(data))\r\n                .catch(err => console.log(err));\r\n            console.log(productId);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {\r\n                    loading ? 'Loading ......' :\r\n                        products.map(product => (<ProductItem\r\n                            key={product._id}\r\n                            product={product}\r\n                            handleDeleteProduct={handleDeleteProduct}\r\n                            handleUpdateProduct={handleUpdateProduct}\r\n                        />\r\n                        ))\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Products;","D:\\web-development\\file-upload\\src\\ProductItem.js",[],"D:\\web-development\\file-upload\\src\\Loader.js",["50","51"],"D:\\web-development\\file-upload\\src\\Skelentor.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":2,"column":8,"nodeType":"58","messageId":"59","endLine":2,"endColumn":18},{"ruleId":"56","severity":1,"message":"60","line":15,"column":9,"nodeType":"58","messageId":"59","endLine":15,"endColumn":16},{"ruleId":"56","severity":1,"message":"61","line":16,"column":10,"nodeType":"58","messageId":"59","endLine":16,"endColumn":23},{"ruleId":"56","severity":1,"message":"62","line":6,"column":37,"nodeType":"58","messageId":"59","endLine":6,"endColumn":42},{"ruleId":"56","severity":1,"message":"63","line":9,"column":12,"nodeType":"58","messageId":"59","endLine":9,"endColumn":20},{"ruleId":"56","severity":1,"message":"64","line":2,"column":8,"nodeType":"58","messageId":"59","endLine":2,"endColumn":14},{"ruleId":"56","severity":1,"message":"65","line":1,"column":10,"nodeType":"58","messageId":"59","endLine":1,"endColumn":19},{"ruleId":"56","severity":1,"message":"66","line":1,"column":21,"nodeType":"58","messageId":"59","endLine":1,"endColumn":29},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'FileUpload' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'updateProduct' is assigned a value but never used.","'watch' is assigned a value but never used.","'products' is assigned a value but never used.","'Loader' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]